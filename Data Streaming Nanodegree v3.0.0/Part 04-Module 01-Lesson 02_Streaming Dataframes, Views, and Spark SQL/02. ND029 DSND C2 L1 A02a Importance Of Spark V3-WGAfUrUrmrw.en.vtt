WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.270
You might be wondering why Spark is important,

00:00:03.270 --> 00:00:05.595
or how an expert thinks about Spark.

00:00:05.595 --> 00:00:08.205
Well, that's what we're going to cover in the next lesson.

00:00:08.205 --> 00:00:12.675
In this lesson, you will gain practice running Spark the same way professionals do.

00:00:12.675 --> 00:00:15.120
You'll get hands-on experience working with

00:00:15.120 --> 00:00:18.480
DataFrames as a means of analyzing streaming data.

00:00:18.480 --> 00:00:21.360
Streaming data can be stored in temporary views

00:00:21.360 --> 00:00:24.105
with specific transformations applied already.

00:00:24.105 --> 00:00:28.255
You will use Spark SQL and DataFrames to query these views.

00:00:28.255 --> 00:00:34.130
Spark is an open source framework for distributed computing across a cluster of servers.

00:00:34.130 --> 00:00:36.295
Typically programming is required.

00:00:36.295 --> 00:00:39.800
Kafka is a durable message broker used to mediate

00:00:39.800 --> 00:00:43.700
the exchange of messages between multiple applications.

00:00:43.700 --> 00:00:49.115
Data at rest is no longer the most relevant information in many subject areas.

00:00:49.115 --> 00:00:51.560
Acting intelligently in response to

00:00:51.560 --> 00:00:54.785
changing conditions is becoming more and more relevant.

00:00:54.785 --> 00:01:00.710
Spark enables organizations to act quickly in response to events as they happen.

00:01:00.710 --> 00:01:05.870
Spark streaming sources are the connection to the outside world for Spark.

00:01:05.870 --> 00:01:07.730
With Kafka as a source,

00:01:07.730 --> 00:01:10.850
virtually anything can be ingested as a stream.

00:01:10.850 --> 00:01:13.005
What does Spark do?

00:01:13.005 --> 00:01:16.360
Using information from a variety of sources,

00:01:16.360 --> 00:01:19.945
Spark allows you to create relationships with other data.

00:01:19.945 --> 00:01:23.845
Spark reads streams of information in near real-time.

00:01:23.845 --> 00:01:26.064
Spark can read from folders,

00:01:26.064 --> 00:01:28.690
sockets, or Kafka topics.

00:01:28.690 --> 00:01:32.620
A cluster is an orientation of two or more servers in

00:01:32.620 --> 00:01:36.385
such a fashion that they can communicate directly with one another,

00:01:36.385 --> 00:01:39.040
or with a cluster manager often for

00:01:39.040 --> 00:01:42.725
the purpose of high availability or increased capacity.

00:01:42.725 --> 00:01:48.040
There are two modes of running Spark: cluster mode and standalone cluster mode.

00:01:48.040 --> 00:01:53.525
Cluster mode has multiple options including Apache Mesos and Kubernetes.

00:01:53.525 --> 00:01:57.815
This diagram conveys the Kubernetes cluster mode configuration.

00:01:57.815 --> 00:02:02.465
The Kubernetes API is the entry point to submit your application.

00:02:02.465 --> 00:02:06.725
The Kubernetes cluster maintains the health of the individual workers.

00:02:06.725 --> 00:02:10.895
The workers are the executors of the Spark streaming application.

00:02:10.895 --> 00:02:16.565
Kubernetes is an open source technology used to coordinate and distribute computing.

00:02:16.565 --> 00:02:19.610
Zookeeper is an open source technology that

00:02:19.610 --> 00:02:23.105
enables semi-autonomous healing of a server cluster.

00:02:23.105 --> 00:02:27.260
This diagram conveys the standalone cluster mode configuration

00:02:27.260 --> 00:02:29.360
which you will use in this course.

00:02:29.360 --> 00:02:31.719
It optionally include Zookeeper.

00:02:31.719 --> 00:02:35.570
Zookeeper's main job is to ensure the master is up and running.

00:02:35.570 --> 00:02:39.310
If needed, it will induct a standby master.

00:02:39.310 --> 00:02:42.395
Because we don't need high availability for this course,

00:02:42.395 --> 00:02:44.300
we will not be using Zookeeper.

00:02:44.300 --> 00:02:48.650
The Spark master's main job is to divvy workup to all the workers.

00:02:48.650 --> 00:02:52.865
The workers are the executors of the Spark streaming application.

00:02:52.865 --> 00:02:55.760
The power of Spark is in the workers.

00:02:55.760 --> 00:03:02.280
Workers allow the streaming application to execute multiple instructions simultaneously.

