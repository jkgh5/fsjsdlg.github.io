WEBVTT
Kind: captions
Language: en

00:00:01.429 --> 00:00:04.559
We just walked through a scenario in which a producer made

00:00:04.559 --> 00:00:07.394
a breaking change with regards to a consumer application.

00:00:07.394 --> 00:00:10.410
In this demonstration, we're actually going to see what that looks like so you can

00:00:10.410 --> 00:00:13.664
get a feel for what happens when data changes unexpectedly.

00:00:13.664 --> 00:00:15.959
So I'm going to jump into my workspace and

00:00:15.960 --> 00:00:18.359
quickly show you this application that we're going to work with.

00:00:18.359 --> 00:00:23.399
So we have a familiar produce and consume function which you have seen from

00:00:23.399 --> 00:00:28.634
the previous examples in previous lessons and we have this Purchase Class down here.

00:00:28.635 --> 00:00:30.915
So again, we're using a data class and we've defined

00:00:30.914 --> 00:00:34.109
a serialization and deserialization function.

00:00:34.109 --> 00:00:36.439
So we can see that the structure that we're going to

00:00:36.439 --> 00:00:39.544
publish is a username and a currency,

00:00:39.545 --> 00:00:41.899
as well as the fact that we're going to publish username,

00:00:41.899 --> 00:00:45.094
currency and amount for the deserialization method.

00:00:45.094 --> 00:00:48.094
But notice I've introduced failure here.

00:00:48.094 --> 00:00:51.350
I put in this random.choice where basically

00:00:51.350 --> 00:00:54.814
Python is going to randomly choose between amount or amount pennies.

00:00:54.814 --> 00:00:57.439
To be clear you would never do this in a real application,

00:00:57.439 --> 00:00:59.419
but I want to show you what would happen if you're

00:00:59.420 --> 00:01:02.539
expecting one type of data but you'd get something totally different.

00:01:02.539 --> 00:01:05.629
So let's go ahead and run this application and see what happens.

00:01:05.629 --> 00:01:10.584
Okay. So we're in Lesson 3 folder and we're going to run sample 1,

00:01:10.584 --> 00:01:14.614
and I'm going to make this full screen so we can see what happens better.

00:01:14.614 --> 00:01:19.849
So we'll give it a second to start up here and we can see that we can only

00:01:19.849 --> 00:01:22.339
unpack some of the messages and we're failing to

00:01:22.340 --> 00:01:25.370
unpack some messages because we're getting an unexpected key.

00:01:25.370 --> 00:01:29.390
This is exactly the scenario we were describing in the previous example where

00:01:29.390 --> 00:01:31.189
the web server team changed

00:01:31.189 --> 00:01:34.399
the expected structure and sent us a different form of the data.

00:01:34.400 --> 00:01:38.640
This isn't a great situation to be in as a data consumer.

00:01:38.640 --> 00:01:43.250
The calculations that we're performing on the data consumption side might be feeding into

00:01:43.250 --> 00:01:47.855
business critical functions and helping informed decisions for downstream teams.

00:01:47.855 --> 00:01:50.510
So you want to make sure that we don't have to have this happen because if

00:01:50.510 --> 00:01:53.030
we're just discarding this data because the key is wrong,

00:01:53.030 --> 00:01:55.460
we're going to be producing completely inaccurate results

00:01:55.459 --> 00:01:57.869
for other teams that depend on us.

