{
  "id": 2660,
  "project_id": 640,
  "upload_types": [
    "repo"
  ],
  "file_filter_regex": "\\A(?!(((.*/)?(__MACOSX|\\.git|node_modules|bower_components|jspm_packages|\\.idea|build|.ipynb_checkpoints|\\.Trash-0|logs)(\\Z|/))))((.*\\.(js|css|py|html|htm|txt|md|markdown|sql|swift|java|gradle|xml|rst|yml|yaml|rmd|pdf|docx|h|H|hh|hxx|h\\+\\+|c|C|cc|cpp|cxx|c\\+\\+)\\Z)|((.*/)?(README|Readme|readme|Makefile)\\Z))",
  "nomination_eligible": false,
  "stand_out": "1. As you develop your Kafka Producer and Consumer code, think about shared functionality. Leverage this shared functionality to organize your code and reduce code duplication.\n2. Create topics for the Kafka REST Proxy Weather topic and Kafka Connect stations topic manually instead of allowing Kafka to use autocreate. Its always better to manually create topics with appropriate settings than to use autocreate!\n3. Consider a naming convention for your topics and follow it throughout your project, including with Kafka REST Proxy and Kafka Connect.",
  "hide_criteria": false,
  "created_at": "2019-07-17T17:46:31.477Z",
  "updated_at": "2019-12-19T15:26:23.698Z",
  "hashtag": "",
  "max_upload_size_mb": 500,
  "estimated_sla": null,
  "project_assistant_enabled": false,
  "available_for_cert_project": false,
  "language": "en-us",
  "ndkeys": [
    "nd029-beta",
    "nd029",
    "nd029-cn",
    "nd029-ent"
  ],
  "coursekeys": [],
  "is_career": false,
  "sections": [
    {
      "id": 5683,
      "name": "Kafka Producer",
      "created_at": "2019-07-22T02:51:45.791Z",
      "updated_at": "2019-07-22T02:54:51.095Z",
      "deleted_at": null,
      "position": 0,
      "rubric_id": 2660,
      "rubric_items": [
        {
          "id": 16309,
          "section_id": 5683,
          "passed_description": "Using the Kafka Topics CLI, topics appear for arrivals on each train line in addition to the turnstiles for each of those stations.",
          "exceeded_description": null,
          "created_at": "2019-07-22T02:54:51.255Z",
          "updated_at": "2019-09-03T01:21:46.378Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Kafka topics are created with appropriate settings",
          "exceedable": false
        },
        {
          "id": 16310,
          "section_id": 5683,
          "passed_description": "Using the Kafka Topics CLI, messages continuously appear for each station on the train line, for both arrivals and turnstile actions.",
          "exceeded_description": null,
          "created_at": "2019-07-22T02:55:36.659Z",
          "updated_at": "2019-09-03T01:21:46.390Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Kafka messages are produced successfully",
          "exceedable": false
        },
        {
          "id": 16311,
          "section_id": 5683,
          "passed_description": "Using the Schema Registry API, a schema is visible for arrivals and turnstile events.",
          "exceeded_description": null,
          "created_at": "2019-07-22T02:56:24.472Z",
          "updated_at": "2019-09-01T23:00:28.803Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "All messages have an associated value schema",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5684,
      "name": "Kafka Consumer",
      "created_at": "2019-07-22T02:56:49.915Z",
      "updated_at": "2019-07-22T02:57:08.615Z",
      "deleted_at": null,
      "position": 1,
      "rubric_id": 2660,
      "rubric_items": [
        {
          "id": 16312,
          "section_id": 5684,
          "passed_description": "Stations, status, and weather data appear and update in the Transit Status UI.",
          "exceeded_description": null,
          "created_at": "2019-07-22T02:57:08.771Z",
          "updated_at": "2019-07-22T02:58:47.901Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Messages are consumed from Kafka",
          "exceedable": false
        },
        {
          "id": 16313,
          "section_id": 5684,
          "passed_description": "All Blue, Green, and Red Line stations appear in the Transit Status UI.",
          "exceeded_description": null,
          "created_at": "2019-07-22T02:58:48.114Z",
          "updated_at": "2019-07-22T03:00:01.933Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Stations data is consumed from the beginning of the topic",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5685,
      "name": "Kafka REST Proxy",
      "created_at": "2019-07-22T03:00:02.110Z",
      "updated_at": "2019-07-22T03:00:08.334Z",
      "deleted_at": null,
      "position": 2,
      "rubric_id": 2660,
      "rubric_items": [
        {
          "id": 16314,
          "section_id": 5685,
          "passed_description": "Using the kafka-console-consumer, weather messages are visible in the weather topic and are regularly produced as the simulation runs.",
          "exceeded_description": null,
          "created_at": "2019-07-22T03:00:08.671Z",
          "updated_at": "2019-08-09T18:30:02.700Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Kafka REST Proxy successfully delivers messages to the Kafka Topic",
          "exceedable": false
        },
        {
          "id": 16315,
          "section_id": 5685,
          "passed_description": "Using the Kafka Schema Registry REST API, a schema is defined for the weather topic. ",
          "exceeded_description": null,
          "created_at": "2019-07-22T03:00:36.037Z",
          "updated_at": "2019-08-09T18:30:02.704Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Messages produced to the Kafka REST Proxy include a value schema",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5686,
      "name": "Kafka Connect",
      "created_at": "2019-07-22T03:01:22.189Z",
      "updated_at": "2019-07-22T03:01:39.130Z",
      "deleted_at": null,
      "position": 3,
      "rubric_id": 2660,
      "rubric_items": [
        {
          "id": 16316,
          "section_id": 5686,
          "passed_description": "Using the kafka-console-consumer, all stations defined in Postgres are visible in the stations topic.",
          "exceeded_description": null,
          "created_at": "2019-07-22T03:01:39.414Z",
          "updated_at": "2019-09-03T01:21:46.396Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Kafka Connect successfully loads Station data from Postgres to Kafka",
          "exceedable": false
        },
        {
          "id": 16317,
          "section_id": 5686,
          "passed_description": "Using the Kafka Connect REST API, the Kafka Connect configuration is configured to use JSON for both key and values.\n\nUsing the Schema Registry REST API, the schemas for stations key and value are visible.\n",
          "exceeded_description": null,
          "created_at": "2019-07-22T03:02:24.436Z",
          "updated_at": "2019-08-09T19:14:18.986Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Kafka Connect is configured to define a Schema",
          "exceedable": false
        },
        {
          "id": 16318,
          "section_id": 5686,
          "passed_description": "Using the Kafka Connect REST API, the Kafka Connect configuration uses an incrementing ID, and the ID is configured to be `stop_id`.",
          "exceeded_description": null,
          "created_at": "2019-07-22T03:03:07.619Z",
          "updated_at": "2019-08-09T18:30:02.713Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Kafka Connect is configured to load on an incrementing ID",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5724,
      "name": "Faust Streams",
      "created_at": "2019-08-08T22:43:52.731Z",
      "updated_at": "2019-08-08T22:44:12.761Z",
      "deleted_at": null,
      "position": 4,
      "rubric_id": 2660,
      "rubric_items": [
        {
          "id": 16415,
          "section_id": 5724,
          "passed_description": "A consumer group for Faust is created on the Kafka Connect Stations topic.",
          "exceeded_description": null,
          "created_at": "2019-08-08T22:44:12.904Z",
          "updated_at": "2019-08-08T22:44:48.333Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "The Faust application ingests data from the stations topic",
          "exceedable": false
        },
        {
          "id": 16416,
          "section_id": 5724,
          "passed_description": "Data is ingested in the `Station` format and is then transformed into the `TransformedStation` format.",
          "exceeded_description": null,
          "created_at": "2019-08-08T22:44:48.483Z",
          "updated_at": "2019-08-08T22:45:26.729Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Data is translated correctly from the Kafka Connect format to the Faust table format",
          "exceedable": false
        },
        {
          "id": 16417,
          "section_id": 5724,
          "passed_description": "A topic is present in Kafka with the output topic name the student supplied. Inspecting messages in the topic, every station ID is represented.",
          "exceeded_description": null,
          "created_at": "2019-08-08T22:45:26.912Z",
          "updated_at": "2019-08-09T18:21:13.008Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Transformed Station Data is Present for each Station ID in the Kafka Topic",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5725,
      "name": "KSQL",
      "created_at": "2019-08-08T22:46:14.378Z",
      "updated_at": "2019-08-08T22:46:29.317Z",
      "deleted_at": null,
      "position": 5,
      "rubric_id": 2660,
      "rubric_items": [
        {
          "id": 16418,
          "section_id": 5725,
          "passed_description": "Using the KSQL CLI, turnstile data is visible in the table `TURNSTILE`.",
          "exceeded_description": null,
          "created_at": "2019-08-08T22:46:29.494Z",
          "updated_at": "2019-08-08T22:47:21.842Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Turnstile topic is translated into a KSQL Table",
          "exceedable": false
        },
        {
          "id": 16419,
          "section_id": 5725,
          "passed_description": "Using the KSQL CLI, verify that station IDs have an associated `count` column.",
          "exceeded_description": null,
          "created_at": "2019-08-08T22:47:22.043Z",
          "updated_at": "2019-08-08T22:48:11.374Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Turnstile table is aggregated into a summary table",
          "exceedable": false
        }
      ]
    }
  ],
  "project": {
    "id": 640,
    "name": "Optimizing Public Transportation",
    "nanodegree_key": "nd029",
    "is_cert_project": false,
    "audit_project_id": null,
    "hashtag": null,
    "audit_rubric_id": 2899,
    "entitlement_required": false,
    "is_career": false,
    "recruitment_family_id": 5,
    "created_at": "2019-08-09T18:30:17.659Z",
    "updated_at": "2021-04-06T12:24:02.569Z",
    "price": "8.0",
    "ungradeable_price": "3.0",
    "audit_price": "0.0"
  }
}