WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.415
An event is an immutable fact regarding something that occurred within our system.

00:00:05.415 --> 00:00:07.859
When we talk about data records in the context of

00:00:07.860 --> 00:00:11.550
stream processing and streaming data we're referring to events.

00:00:11.550 --> 00:00:13.875
For example, the user clicks a button.

00:00:13.875 --> 00:00:17.390
So click and then an event occurs, a click event.

00:00:17.390 --> 00:00:21.304
We may emit an event to our data stream that captures the timestamp,

00:00:21.304 --> 00:00:23.195
user ID, and click event.

00:00:23.195 --> 00:00:26.329
The distinction of an event as an immutable fact is

00:00:26.329 --> 00:00:29.809
critical especially in comparison to traditional data stores.

00:00:29.809 --> 00:00:32.509
We say that an event is an immutable fact,

00:00:32.509 --> 00:00:36.424
we mean that it cannot be changed once it has been created.

00:00:36.424 --> 00:00:38.329
When I use the term data-store,

00:00:38.329 --> 00:00:40.894
I'm referring to any place you might keep your data.

00:00:40.895 --> 00:00:45.215
I use the term data-store instead of database specifically as a generic term.

00:00:45.215 --> 00:00:48.155
A data-store can be anything from a file on your disk,

00:00:48.155 --> 00:00:49.835
a table in a SQL database,

00:00:49.835 --> 00:00:51.725
or a file and Cloud storage.

00:00:51.725 --> 00:00:57.125
Databases like PostgreSQL are often built to store the state of an application and time.

00:00:57.125 --> 00:00:58.969
So here we have a database,

00:00:58.969 --> 00:01:01.129
could be MySQL, Postgres,

00:01:01.130 --> 00:01:02.929
your whatever your favorite SQL database is,

00:01:02.929 --> 00:01:05.659
it doesn't matter, and within this database we might have

00:01:05.659 --> 00:01:09.034
a user table with a user ID and a favorite color.

00:01:09.034 --> 00:01:11.435
In this case, the user's favorite color is brown.

00:01:11.435 --> 00:01:14.329
Now what happens if we update that favorite color?

00:01:14.329 --> 00:01:16.174
Let's say we set it to red.

00:01:16.174 --> 00:01:19.879
Well, in a database table that value is now red.

00:01:19.879 --> 00:01:23.049
There's no history that the user ever had the favorite color brown,

00:01:23.049 --> 00:01:24.575
it's lost to time.

00:01:24.575 --> 00:01:27.170
Same things happens if we update it to green,

00:01:27.170 --> 00:01:30.715
we now have no history that the user ever so their favorite color as red,

00:01:30.715 --> 00:01:32.689
and likewise if we update it to a blue,

00:01:32.689 --> 00:01:36.754
we have no history that their favorite color was ever green, red, or brown.

00:01:36.754 --> 00:01:39.534
This is a typical feature of many SQL databases.

00:01:39.534 --> 00:01:40.849
If you want to have history,

00:01:40.849 --> 00:01:43.234
you have to create it yourself in a separate table.

00:01:43.234 --> 00:01:45.739
It's not common to be able to track history of

00:01:45.739 --> 00:01:49.879
what values were used for a particular user in the past.

00:01:49.879 --> 00:01:53.644
Message queues typically communicate commands to perform an action.

00:01:53.644 --> 00:01:58.384
In comparison, invented systems react to the facts that are communicated to them.

00:01:58.385 --> 00:02:02.689
So in this illustration on the screen you can see that we've sent a command,

00:02:02.689 --> 00:02:05.000
send email to Bob through

00:02:05.000 --> 00:02:10.354
our message queue which an email servers then receives this command and sends an email.

00:02:10.354 --> 00:02:13.084
This is how traditional data stores work.

00:02:13.085 --> 00:02:15.650
Again to reiterate, in comparison,

00:02:15.650 --> 00:02:18.890
invented systems react to the facts that are communicated to them.

00:02:18.889 --> 00:02:21.929
This communication is typically indirect.

00:02:21.930 --> 00:02:23.379
As the user clicks,

00:02:23.379 --> 00:02:25.025
we send out an action.

00:02:25.025 --> 00:02:27.289
These are clicked somewhere on the screen,

00:02:27.289 --> 00:02:30.364
we talked about what the user clicked but we aren't sending

00:02:30.365 --> 00:02:33.320
a command or we're not telling a downstream system to do anything,

00:02:33.319 --> 00:02:35.569
were simply describing something that occurred

00:02:35.569 --> 00:02:39.275
on our actual device or in a different system.

00:02:39.275 --> 00:02:41.800
This communication's typically indirect,

00:02:41.800 --> 00:02:43.700
and the events that are emitted do not contain

00:02:43.699 --> 00:02:46.909
information specifically targeting a downstream system.

00:02:46.909 --> 00:02:49.549
Thinking of our data in these terms is a key component to

00:02:49.550 --> 00:02:53.070
successfully designing and building streaming data systems.

