WEBVTT
Kind: captions
Language: en

00:00:01.459 --> 00:00:04.290
One of the most frequent operations we're

00:00:04.290 --> 00:00:06.765
likely to perform in our stream processing applications

00:00:06.764 --> 00:00:11.445
is to combine or join multiple streams into one output stream.

00:00:11.445 --> 00:00:14.339
In this section, we're going to see how KSQL makes this process

00:00:14.339 --> 00:00:17.535
painless with simple SQL join syntax.

00:00:17.535 --> 00:00:22.800
In this example, we're joining our username stream to our purchases stream,

00:00:22.800 --> 00:00:29.070
producing a new output stream based on the shared key attribute username.

00:00:29.070 --> 00:00:32.880
This is one of the more common use cases for joining in stream processing.

00:00:32.880 --> 00:00:34.925
It's fairly frequent that we want to enrich

00:00:34.924 --> 00:00:39.454
one data source with information from one or more other data sources.

00:00:39.454 --> 00:00:42.795
KSQL supports full left outer joints,

00:00:42.795 --> 00:00:44.440
as well as inner joints.

00:00:44.439 --> 00:00:46.759
This example is a good place to pause and

00:00:46.759 --> 00:00:49.699
discuss some of the requirements for joining in KSQL.

00:00:49.700 --> 00:00:53.410
If the streams that are being joined are not co-partitioned,

00:00:53.409 --> 00:00:55.724
meaning they don't share the same key,

00:00:55.725 --> 00:00:57.980
we can't join these streams.

00:00:57.979 --> 00:01:01.099
The key that we choose to use in KSQL must also

00:01:01.100 --> 00:01:04.460
match the key for our messages in the Kafka topic.

00:01:04.459 --> 00:01:11.194
So again, if both purchases and users didn't share the username key attribute,

00:01:11.194 --> 00:01:15.309
we would have to co-partition these streams to do this join.

00:01:15.310 --> 00:01:17.730
This doesn't mean we can't join the tables or streams

00:01:17.730 --> 00:01:20.085
we're interested in if they're not co-partitioned,

00:01:20.084 --> 00:01:24.224
it simply means we have to re-partition our data so that a join is possible.

00:01:24.224 --> 00:01:27.169
To re-partition one or more streams for a join,

00:01:27.170 --> 00:01:29.060
you can use a group by to create

00:01:29.060 --> 00:01:33.984
an intermediate stream that is appropriately co- partitioned for the join.

00:01:33.984 --> 00:01:36.799
Again, another note I want to make before we move on.

00:01:36.799 --> 00:01:38.719
You can join tables to tables.

00:01:38.719 --> 00:01:42.034
Again, table to table, stream to stream,

00:01:42.034 --> 00:01:44.015
or stream to table,

00:01:44.015 --> 00:01:47.959
but you cannot join tables to streams.

00:01:47.959 --> 00:01:52.399
You also cannot perform a full outer join on streams to tables.

00:01:52.400 --> 00:01:56.800
You may only perform left or inner joints.

00:01:56.799 --> 00:02:00.435
Stream to stream joints may also be windowed, if you so desire,

00:02:00.435 --> 00:02:04.560
following the same syntax as we saw earlier in the lesson.

