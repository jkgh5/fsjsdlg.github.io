WEBVTT
Kind: captions
Language: en

00:00:02.029 --> 00:00:05.939
Now let's actually put this into practice and jump

00:00:05.940 --> 00:00:09.734
back into ksql and see how we can use these aggregate functions.

00:00:09.734 --> 00:00:11.339
Returning to our workspace,

00:00:11.339 --> 00:00:14.490
we're going to start by taking a look at how to use sum.

00:00:14.490 --> 00:00:17.504
So we already have a purchase stream.

00:00:17.504 --> 00:00:19.289
So we're simply going to select

00:00:19.289 --> 00:00:23.219
currency and sum the amount for each of those currencies in

00:00:23.219 --> 00:00:30.320
the stream from purchases and we're going to group by currency.

00:00:30.320 --> 00:00:34.984
So this group by is going to go ahead and aggregate and allow us to say by currency,

00:00:34.984 --> 00:00:37.920
how much value have we seen?

00:00:38.469 --> 00:00:41.390
Let this run for just a moment and you'll see

00:00:41.390 --> 00:00:43.310
that these values are going to continue to update.

00:00:43.310 --> 00:00:44.990
So this is not a static thing.

00:00:44.990 --> 00:00:48.890
So we're going to see the same currency value repeat itself multiple times.

00:00:48.890 --> 00:00:52.920
So I'm going to go ahead and cancel this query so we can look through here.

00:00:52.920 --> 00:00:55.195
So let's look at the renminbi.

00:00:55.195 --> 00:00:58.730
So we have 2450768 and let's look for

00:00:58.729 --> 00:01:04.590
the previous time that that printed out and here we can see it here, 1832064.

00:01:04.590 --> 00:01:06.045
So as time is going on,

00:01:06.045 --> 00:01:11.115
essentially what's going on is ksql is essentially taking all of the events,

00:01:11.114 --> 00:01:13.009
finding the currency code for it,

00:01:13.010 --> 00:01:14.840
and then adding to the sum of it.

00:01:14.840 --> 00:01:18.195
This is similar to what we saw with FAUST.

00:01:18.194 --> 00:01:21.429
Now, what if we wanted to use a histogram?

00:01:21.430 --> 00:01:23.855
This would allow us to count the number of occurrences

00:01:23.855 --> 00:01:27.155
for a given value over a period of time as it says here.

00:01:27.155 --> 00:01:29.344
So let's go ahead and see what that might look like.

00:01:29.344 --> 00:01:31.355
We're going to just modify the previous query

00:01:31.355 --> 00:01:33.770
to actually go ahead and add in this histogram.

00:01:33.769 --> 00:01:38.549
So we're also going to name this sum amount as total amount,

00:01:39.620 --> 00:01:42.230
just so it's easier to refer to.

00:01:42.230 --> 00:01:45.695
I just want to show the syntax for those of you who aren't as familiar with sequel.

00:01:45.694 --> 00:01:47.419
You can alias fields.

00:01:47.420 --> 00:01:55.144
We're also going to say histogram of currency as num purchases.

00:01:55.144 --> 00:01:57.420
Let's see how this works.

00:01:57.459 --> 00:02:01.549
So what's nice about this is we can actually see

00:02:01.549 --> 00:02:04.909
now not only the total value of purchases.

00:02:04.909 --> 00:02:06.935
So let's go ahead and cancel this.

00:02:06.935 --> 00:02:08.509
So for US dollars,

00:02:08.509 --> 00:02:10.939
this is the total amount of value that we processed.

00:02:10.939 --> 00:02:17.000
But not only that, I can see how many times I have seen an event of type USD.

00:02:17.000 --> 00:02:19.610
Same thing with Canadian dollars, Euros,

00:02:19.610 --> 00:02:21.940
Great British pounds, Australian dollars,

00:02:21.939 --> 00:02:23.895
and so on and so forth.

00:02:23.895 --> 00:02:28.170
So the histogram function would be really useful for that.

00:02:28.280 --> 00:02:32.344
Finally, let's take a look at top k. So let's say we wanted to see

00:02:32.344 --> 00:02:35.990
the top five purchases of the last 30 seconds.

00:02:35.990 --> 00:02:39.575
Well, we could do again, a select query.

00:02:39.574 --> 00:02:41.854
So we're going to select by currency.

00:02:41.854 --> 00:02:45.379
Let's have five values by amount from

00:02:45.379 --> 00:02:49.849
the purchases stream and we're going to use a tumbling window here,

00:02:49.849 --> 00:02:52.609
just want us to reset every 30 seconds

00:02:52.610 --> 00:02:56.950
and we're going to group by currency so that the aggregation is performed.

00:02:56.949 --> 00:02:59.280
So that currency is our key.

00:02:59.280 --> 00:03:01.879
All right, and this is pretty cool.

00:03:01.879 --> 00:03:04.055
If we actually let this run, you'll see we're going to hold

00:03:04.055 --> 00:03:06.710
up to five transactions per currency.

00:03:06.710 --> 00:03:08.030
In the 30-second mark,

00:03:08.030 --> 00:03:09.169
you're going to see this reset.

00:03:09.169 --> 00:03:11.859
So you can see most of our currencies have

00:03:11.860 --> 00:03:15.380
almost at least have five transactions at this point.

00:03:15.379 --> 00:03:18.319
Any moment now, at the 30-second mark,

00:03:18.319 --> 00:03:19.474
this is going to reset.

00:03:19.474 --> 00:03:21.275
You're going to see these arrays empty out

00:03:21.275 --> 00:03:23.450
because that tumbling window is expired. There you go.

00:03:23.449 --> 00:03:26.554
So you see here,

00:03:26.555 --> 00:03:31.295
that these are the top five transactions per currency, right?

00:03:31.294 --> 00:03:34.699
Then after that 30-second window expired,

00:03:34.699 --> 00:03:36.229
we had to start over again.

00:03:36.229 --> 00:03:37.988
So for each of the currencies,

00:03:37.989 --> 00:03:40.490
these are the top five transactions and some of which,

00:03:40.490 --> 00:03:43.960
some of these currencies didn't even have five transactions attract,

00:03:43.960 --> 00:03:46.969
but you'll actually notice that as these keys repeat,

00:03:46.969 --> 00:03:50.569
so we have USD here and we have USD here,

00:03:50.569 --> 00:03:52.430
let's see if the keys change.

00:03:52.430 --> 00:03:56.270
So yes, you can see on this line.

00:03:56.270 --> 00:04:01.219
The fifth largest transaction was 149711 but here,

00:04:01.219 --> 00:04:05.344
it's now been updated to 149819.

00:04:05.344 --> 00:04:09.439
So we can see that the top five is continually being updated.

00:04:09.439 --> 00:04:12.275
All right, and that's the demonstration of aggregates.

00:04:12.275 --> 00:04:14.990
There are many other functions and I strongly recommend that you go

00:04:14.990 --> 00:04:18.230
ahead and take a look at the documentation to see what's available.

00:04:18.230 --> 00:04:21.470
This is one of the more powerful features of ksql is

00:04:21.470 --> 00:04:24.650
being able to actually go ahead and use these aggregate functions

00:04:24.649 --> 00:04:27.649
to save yourself a lot of time and effort that you'd otherwise

00:04:27.649 --> 00:04:32.060
normally have to spend building your own custom application.

