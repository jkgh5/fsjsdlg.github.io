WEBVTT
Kind: captions
Language: en

00:00:01.669 --> 00:00:04.904
Let's pull the stream processing application together.

00:00:04.905 --> 00:00:08.849
In this sample, we're going to filter out any purchases with an amount less than a

00:00:08.849 --> 00:00:12.660
$100,000 and anything that's actually using US dollars.

00:00:12.660 --> 00:00:16.964
So we're only going to look at international currencies with large value purchases.

00:00:16.964 --> 00:00:20.100
So if we scroll down, we have our familiar function at this point,

00:00:20.100 --> 00:00:21.554
we have our app agent,

00:00:21.554 --> 00:00:25.140
we have a purchase function which takes the purchases stream.

00:00:25.140 --> 00:00:26.730
So this is a stream as is this,

00:00:26.730 --> 00:00:30.405
and then we iterate over every purchase in that stream.

00:00:30.405 --> 00:00:33.719
Now we want to apply a filter to

00:00:33.719 --> 00:00:39.015
every purchase in the purchase of stream before we iterate on it in this function.

00:00:39.015 --> 00:00:41.910
To do that, we're going to use a filter function.

00:00:41.909 --> 00:00:46.969
Now a filter function takes a function which accepts one argument.

00:00:46.969 --> 00:00:50.125
We're going to use a lambda to accomplish this goal.

00:00:50.125 --> 00:00:55.185
The lambda, it needs to return true or false whether we should filter this object.

00:00:55.185 --> 00:00:59.520
So here we want to say that x,

00:00:59.520 --> 00:01:03.520
where x is of type purchase,

00:01:03.679 --> 00:01:10.489
we want to first make sure that the currency type does not equal US

00:01:10.489 --> 00:01:17.699
dollar and that the amount is greater than a 100,000.

00:01:17.700 --> 00:01:20.480
Now that we've done that, we can actually for the purchase

00:01:20.480 --> 00:01:23.704
along to our high_value_international_topic.

00:01:23.704 --> 00:01:28.250
Now remember that when we use the send function that we need to await it,

00:01:28.250 --> 00:01:31.340
and we're going to send set the key equal to the purchase.

00:01:31.340 --> 00:01:37.010
username and the value equal to the purchase.

00:01:37.010 --> 00:01:41.240
Now this kind of functionality is extremely common in most workplace settings.

00:01:41.239 --> 00:01:43.879
Essentially, the general idea here would be you might have

00:01:43.879 --> 00:01:46.369
a marketing or business team which is only

00:01:46.370 --> 00:01:49.609
interested in his high value international purchases.

00:01:49.609 --> 00:01:51.844
So instead of just assigning them a stream with

00:01:51.844 --> 00:01:54.200
all the data that can be contained inside of it,

00:01:54.200 --> 00:01:56.900
we're going to give them a very specific stream of data.

00:01:56.900 --> 00:01:59.510
So really, all the streaming function is doing is

00:01:59.510 --> 00:02:04.285
repackaging the input stream into a single output stream.

00:02:04.284 --> 00:02:08.180
Now that being said, let's go ahead and actually run the function.

00:02:08.180 --> 00:02:13.560
So python sample4.py worker.

00:02:13.669 --> 00:02:17.059
As this starts up, we're going to go jump over to another terminal

00:02:17.060 --> 00:02:20.449
here and actually run our console consumer in just a moment.

00:02:20.449 --> 00:02:23.429
All right. So we're running.

00:02:25.750 --> 00:02:28.210
One quick mistake here,

00:02:28.210 --> 00:02:31.680
I forgot to quote my string value.

00:02:31.680 --> 00:02:35.409
Let's go ahead and save that, update that.

00:02:35.409 --> 00:02:41.784
So now that we've created our filter and we defined our topic to send and waited it,

00:02:41.784 --> 00:02:44.104
let's actually go ahead and run our function.

00:02:44.104 --> 00:02:47.629
Python sample4.py worker.

00:02:47.629 --> 00:02:50.704
Go ahead and wait for that worker to start up.

00:02:50.705 --> 00:02:53.600
Now that it started and producing data,

00:02:53.599 --> 00:02:57.430
let's jump to a terminal and actually start consuming the data.

00:02:57.620 --> 00:03:00.615
Grab our topic name,

00:03:00.615 --> 00:03:05.719
and we'll actually begin consuming data from this topic.

00:03:05.719 --> 00:03:08.599
So it's moving pretty fast.

00:03:08.599 --> 00:03:12.439
Let's go ahead and stop. You'll notice all the purchases are

00:03:12.439 --> 00:03:16.650
more than a 100,000 and all the currencies are foreign.

00:03:16.650 --> 00:03:18.664
None of them are US dollars,

00:03:18.664 --> 00:03:22.465
instead, they're foreign currencies to the US.

00:03:22.465 --> 00:03:29.069
This is how you would go ahead and apply a filter function to an incoming stream.

