WEBVTT
Kind: captions
Language: en

00:00:01.790 --> 00:00:05.339
As we just learned, Faust leverages the record type for

00:00:05.339 --> 00:00:08.039
both serialization and deserialization.

00:00:08.039 --> 00:00:10.500
Now, let's go ahead and see that in action.

00:00:10.500 --> 00:00:12.689
So returning to our work space once again,

00:00:12.689 --> 00:00:14.580
we're now opening sample 3.

00:00:14.580 --> 00:00:18.059
We already have our data class defined our app,

00:00:18.059 --> 00:00:19.559
and our purchases topic.

00:00:19.559 --> 00:00:22.140
Now, the goal of our demonstration this time is to

00:00:22.140 --> 00:00:25.019
actually write data out to an output topic.

00:00:25.019 --> 00:00:28.559
So you can see we already have this function defined.

00:00:28.559 --> 00:00:31.859
But we're going to modify the incoming data, the purchase data,

00:00:31.859 --> 00:00:36.075
to convert the amount from pennies to dollars.

00:00:36.075 --> 00:00:39.980
Let's go ahead and define our output topic first.

00:00:39.979 --> 00:00:42.939
We'll just call it dollars topic

00:00:42.939 --> 00:00:46.460
and we're going to define it the same way we would define an input topic.

00:00:46.460 --> 00:00:52.420
We're going to have app.topic, com.udacity.streams.purchases.

00:00:52.420 --> 00:00:55.895
This time we'll just add dollars to the end

00:00:55.895 --> 00:00:59.810
to indicate that we're converting the purchases data into dollars.

00:00:59.810 --> 00:01:04.460
The value type we're going to use is going to be purchase but

00:01:04.459 --> 00:01:09.439
slightly different because we want to modify the amount to be a float.

00:01:09.439 --> 00:01:13.155
So we're going to define a purchase dollars value type.

00:01:13.155 --> 00:01:19.430
We're going to make this a float in this case. All right.

00:01:19.430 --> 00:01:27.400
Then we're going to use the same key and we'll clean this up so it's all on one line.

00:01:27.400 --> 00:01:30.820
So you've got a key type, a value type,

00:01:30.819 --> 00:01:33.129
and our topic name.

00:01:33.129 --> 00:01:35.229
So now that we have this dollars topic,

00:01:35.230 --> 00:01:39.630
we can scroll down to our definition here of our function.

00:01:39.629 --> 00:01:42.489
So we're going to use the.send function,

00:01:42.489 --> 00:01:48.234
but first we need to create our actual purchases dollars object.

00:01:48.234 --> 00:01:51.325
So we're going to instantiate that object but first,

00:01:51.325 --> 00:01:56.320
we need to go ahead and actually instantiate it with the correct values.

00:01:56.319 --> 00:01:59.394
So we're going to go ahead and pass in our values.

00:01:59.394 --> 00:02:06.280
So first we're going to say the username is equal to purchase.username.

00:02:06.530 --> 00:02:12.824
The currency is equal to purchase.currency.

00:02:12.824 --> 00:02:15.799
The amount, this is where we're going to make the difference here.

00:02:15.800 --> 00:02:21.020
We're going to say purchase.amount which is an int divided by a 100.

00:02:21.020 --> 00:02:25.025
All right. Then we're going to go ahead and send it to this topic.

00:02:25.025 --> 00:02:28.520
First, we have to specify that this is the value and that

00:02:28.520 --> 00:02:34.235
the key is equal to username, purchase.username.

00:02:34.235 --> 00:02:37.520
With that done, we're ready to go ahead and run our application.

00:02:37.520 --> 00:02:40.010
So let's take a look at how this works.

00:02:40.009 --> 00:02:42.274
We need to make sure we always specify

00:02:42.275 --> 00:02:45.990
that worker argument because we can

00:02:45.990 --> 00:02:50.865
see the Faust application is starting up again. All right.

00:02:50.865 --> 00:02:54.980
I've actually made a mistake here. You can see we're getting a warning from Faust itself.

00:02:54.979 --> 00:02:56.719
So it's mentioned, "Hey,

00:02:56.719 --> 00:03:00.784
you called the send function which is async and you forgot to await it.

00:03:00.784 --> 00:03:02.525
So this is a mistake on my part.

00:03:02.525 --> 00:03:04.895
We want to make sure we put in await in front of the send.

00:03:04.895 --> 00:03:09.290
So we want to await the send because this is an async function.

00:03:09.289 --> 00:03:11.495
So now we've done that, I've saved,

00:03:11.495 --> 00:03:13.890
we're going to go ahead and restart.

00:03:14.449 --> 00:03:17.024
Then once that goes ahead and gets running,

00:03:17.025 --> 00:03:18.950
we're going to actually open up a new terminal and use

00:03:18.949 --> 00:03:21.875
the Kafka Console Consumer to see the data flowing through.

00:03:21.875 --> 00:03:24.618
So as you've seen previously,

00:03:24.618 --> 00:03:34.270
we're going to say kafka-console-consumer--bootstrap-server localhost:9092.

00:03:34.270 --> 00:03:37.340
Finally, we simply need to specify our topic which in

00:03:37.340 --> 00:03:40.384
this case is com.udacity.streams.purchases.dollars.

00:03:40.384 --> 00:03:42.969
We're going to hit Enter and we're going to wait.

00:03:42.969 --> 00:03:48.560
As you can see, we have all of our data being printed out from our Faust application.

00:03:48.560 --> 00:03:51.080
There's a little bit of metadata here which you don't need to worry about,

00:03:51.080 --> 00:03:55.715
Faust just adds this to the messages but I can basically track where it was generated.

00:03:55.715 --> 00:04:01.189
There's also this amount which you'll notice is a float now instead of a raw integer.

00:04:01.189 --> 00:04:04.250
This is a simple example of taking one input stream,

00:04:04.250 --> 00:04:06.319
making some modification to the data,

00:04:06.319 --> 00:04:08.914
and putting out the events in a slightly modified form.

00:04:08.914 --> 00:04:12.664
This is an extraordinarily common use case of stream processing.

00:04:12.664 --> 00:04:14.995
So you can see how easy that was to do.

00:04:14.995 --> 00:04:19.730
Just to emphasize, all we did was define another topic and

00:04:19.730 --> 00:04:25.950
simply modified the data into this other model and then sent it to this new topic.

