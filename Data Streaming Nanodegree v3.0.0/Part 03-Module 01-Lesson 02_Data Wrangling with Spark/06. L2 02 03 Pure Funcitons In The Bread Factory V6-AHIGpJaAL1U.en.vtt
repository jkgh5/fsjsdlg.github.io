WEBVTT
Kind: captions
Language: en

00:00:05.059 --> 00:00:08.789
Imagine your program is like a bread factory,

00:00:08.789 --> 00:00:13.259
and your function is a specific machine in your factory that makes sourdough bread.

00:00:13.259 --> 00:00:16.304
The inputs to your function are like the ingredients,

00:00:16.304 --> 00:00:17.669
and every time you run it,

00:00:17.670 --> 00:00:19.725
it gives you the perfect loaf.

00:00:19.725 --> 00:00:22.470
If you were just making some bread in your kitchen,

00:00:22.469 --> 00:00:25.964
you could cut off the corners as long as you follow the general recipe.

00:00:25.964 --> 00:00:30.089
But since your factory needs to mass-produce bread at a large scale,

00:00:30.089 --> 00:00:32.054
you need to be a bit more careful.

00:00:32.054 --> 00:00:34.380
Your bread maker needs to be designed,

00:00:34.380 --> 00:00:36.310
so you can build several copies of it,

00:00:36.310 --> 00:00:40.535
and these copies can all run smoothly across the factory.

00:00:40.534 --> 00:00:42.889
One thing you'll need to avoid when designing

00:00:42.890 --> 00:00:46.160
your breadmaker is unintended side effects.

00:00:46.159 --> 00:00:48.709
After each loaf, your machine needs to leave

00:00:48.710 --> 00:00:51.935
the factory exactly the same as before it ran.

00:00:51.935 --> 00:00:55.820
If you don't, each machine could start interfering with the others.

00:00:55.820 --> 00:00:59.060
For example, if running a single breadmaker

00:00:59.060 --> 00:01:02.060
made the entire factory one degree warmer,

00:01:02.060 --> 00:01:04.760
then running several of these machines all at once

00:01:04.760 --> 00:01:06.695
would start to heat up the room.

00:01:06.694 --> 00:01:08.899
This would mess up the baking temperature for

00:01:08.900 --> 00:01:12.305
all the machines and you'd end up with a lot of bad bread.

00:01:12.305 --> 00:01:15.620
In distributed systems, your functions shouldn't

00:01:15.620 --> 00:01:18.550
have side effects on variables outside their scope,

00:01:18.549 --> 00:01:22.804
since this could interfere with other functions running on your cluster.

00:01:22.805 --> 00:01:27.950
Another potential issue is contamination of your original ingredients,

00:01:27.950 --> 00:01:30.140
if you've ever made sourdough bread,

00:01:30.140 --> 00:01:32.320
you know that you need a combination of water,

00:01:32.319 --> 00:01:35.799
sugar, and yeast known as the starter.

00:01:35.799 --> 00:01:40.429
Some sourdough bread factories have maintained their starters for decades,

00:01:40.430 --> 00:01:44.660
and they protect them the same way tech companies protect their valuable data.

00:01:44.659 --> 00:01:48.170
Your bread making machine needs to get the ingredients without

00:01:48.170 --> 00:01:51.950
ruining them since other breadmakers will also need them.

00:01:51.950 --> 00:01:54.980
Bread companies do this by using a mother dough

00:01:54.980 --> 00:01:57.020
that can make copies of the starter,

00:01:57.019 --> 00:02:00.515
and these companies are very careful with this parent dough.

00:02:00.515 --> 00:02:03.950
In distributed systems, you also need to be careful

00:02:03.950 --> 00:02:06.144
with how you design your functions.

00:02:06.144 --> 00:02:08.794
Whenever your functions run on some input data,

00:02:08.794 --> 00:02:11.599
it can alter it in the process.

00:02:11.599 --> 00:02:13.819
If your bread-making machine protects

00:02:13.819 --> 00:02:16.819
the input ingredients and doesn't cause any side effects,

00:02:16.819 --> 00:02:19.930
then you have a smooth and clean operation.

00:02:19.930 --> 00:02:22.610
Similarly, if you write functions that preserve

00:02:22.610 --> 00:02:25.190
their inputs and avoid side effects,

00:02:25.189 --> 00:02:27.349
these are called peer functions,

00:02:27.349 --> 00:02:31.500
and your spark code will work well at the scale of big data.

