WEBVTT
Kind: captions
Language: zh-CN

00:00:05.059 --> 00:00:08.789
你的程序好比一个面包工厂

00:00:08.789 --> 00:00:13.259
程序中的每个函数就像工厂里生产面包的一台机器

00:00:13.259 --> 00:00:16.304
函数的输入就像是原料

00:00:16.304 --> 00:00:17.669
每次运行机器后

00:00:17.670 --> 00:00:19.725
它就会产出一条完美的面包

00:00:19.725 --> 00:00:22.470
如果你只是在厨房里做面包

00:00:22.469 --> 00:00:25.964
你可以忽略一些细节 只用遵循大致的制作流程

00:00:25.964 --> 00:00:30.089
但因为你的工厂需要大规模批量生产面包

00:00:30.089 --> 00:00:32.054
你就需要更加仔细了

00:00:32.054 --> 00:00:34.380
你的面包制造机器需要精心设计

00:00:34.380 --> 00:00:36.310
你可以制造许多相同的机器

00:00:36.310 --> 00:00:40.535
然后这些机器能在工厂按照预期来运行

00:00:40.534 --> 00:00:42.889
在设计面包机器时

00:00:42.890 --> 00:00:46.160
你需要考虑很多因素 

00:00:46.159 --> 00:00:48.709
比如 每造一个面包 这个面包机都要离开工厂

00:00:48.710 --> 00:00:51.935
这样才能保证工厂的状态与造这个面包之前是完全一致的

00:00:51.935 --> 00:00:55.820
如果不这样的话 就可能会发生一些意料之外的事情

00:00:55.820 --> 00:00:59.060
例如 如果运行单个面包机

00:00:59.060 --> 00:01:02.060
会使整个工厂温度升高一度

00:01:02.060 --> 00:01:04.760
那么一次运行多台机器

00:01:04.760 --> 00:01:06.695
就会让房间变热很多

00:01:06.694 --> 00:01:08.899
这就破坏了所有机器的烘烤温度

00:01:08.900 --> 00:01:12.305
这样你最终获得的面包就都不合格了

00:01:12.305 --> 00:01:15.620
在分布式系统中的函数不应该

00:01:15.620 --> 00:01:18.550
对其范围之外的变量造成影响

00:01:18.549 --> 00:01:22.804
因为这可能会干扰群集上运行的其他函数

00:01:22.805 --> 00:01:27.950
另一个可能的问题是对原材料的污染

00:01:27.950 --> 00:01:30.140
要做面包 

00:01:30.140 --> 00:01:32.320
你会需要水

00:01:32.319 --> 00:01:35.799
糖和酵母的组合 称为配方

00:01:35.799 --> 00:01:40.429
一些面包工厂的配方在几十年里都维持原样

00:01:40.430 --> 00:01:44.660
他们对自己的配方保密之严格堪比科技公司对数据的保护

00:01:44.659 --> 00:01:48.170
机器在使用原料制作面包时

00:01:48.170 --> 00:01:51.950
不能破坏原料 因为其他面包机也要使用

00:01:51.950 --> 00:01:54.980
面包公司会使用老面来达到这个目的

00:01:54.980 --> 00:01:57.020
老面可以复制多分原始配料

00:01:57.019 --> 00:02:00.515
而工厂对这种老面的保护也十分小心

00:02:00.515 --> 00:02:03.950
在分布式系统中，你也要十分谨慎地设计函数

00:02:06.144 --> 00:02:08.794
每当函数运行某些输入数据时

00:02:08.794 --> 00:02:11.599
函数在整个运行过程都有可能会改变数据

00:02:11.599 --> 00:02:13.819
如果你的面包机不会破坏原料

00:02:13.819 --> 00:02:16.819
而且也不会对工厂环境造成任何额外影响

00:02:16.819 --> 00:02:19.930
那么面包生产的过程将会变的非常顺畅

00:02:19.930 --> 00:02:22.610
同样 如果你编写的函数

00:02:22.610 --> 00:02:25.190
不会篡改原始输入数据也不会对函数范围外的变量造成影响

00:02:25.189 --> 00:02:27.349
这种函数被叫做纯函数

00:02:27.349 --> 00:02:31.500
Spark 的代码在运行大规模的数据也就会非常顺畅

