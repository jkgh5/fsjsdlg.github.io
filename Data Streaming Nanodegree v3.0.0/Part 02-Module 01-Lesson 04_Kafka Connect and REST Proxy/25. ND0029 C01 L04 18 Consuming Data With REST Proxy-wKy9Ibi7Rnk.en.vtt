WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.695
Consuming data with REST Proxy requires a little more effort than the producer endpoints.

00:00:04.695 --> 00:00:06.839
In this class, we're going to focus on

00:00:06.839 --> 00:00:08.955
the most common and most basic functionality

00:00:08.955 --> 00:00:11.745
offered by the REST Proxy consumer endpoints.

00:00:11.744 --> 00:00:13.679
To consume data from REST Proxy,

00:00:13.679 --> 00:00:17.054
you must first post to create a named consumer group,

00:00:17.054 --> 00:00:19.814
just as you would do with normal call for client.

00:00:19.815 --> 00:00:21.330
The name must be unique.

00:00:21.329 --> 00:00:23.669
In this post to create the consumer group,

00:00:23.670 --> 00:00:27.630
you'll specify a format of either binary, JSON, or Avro.

00:00:27.629 --> 00:00:30.974
The format you specify will determine how REST Proxy

00:00:30.975 --> 00:00:34.875
formats the date at which is returned to you when you begin to consume later on.

00:00:34.875 --> 00:00:40.875
Additionally, the post will return to you a 200 response if successful,

00:00:40.875 --> 00:00:43.289
the instance ID of your consumer,

00:00:43.289 --> 00:00:44.789
and a base URI.

00:00:44.789 --> 00:00:46.820
You should be using this base URI to format

00:00:46.820 --> 00:00:49.609
your future requests for consumer information.

00:00:49.609 --> 00:00:51.339
Using the base URI ,

00:00:51.340 --> 00:00:54.875
you now need to post another request to the subscribe endpoint.

00:00:54.875 --> 00:00:59.615
This subscribes the consumer group you just created to one or more topics.

00:00:59.615 --> 00:01:03.079
Notice here that I'm posting to consumers,

00:01:03.079 --> 00:01:06.939
group name, instances with the instance ID/subscription.

00:01:07.090 --> 00:01:11.105
This is all included in the base URI.

00:01:11.105 --> 00:01:14.885
So the only thing you would need to append to the base URI is subscription.

00:01:14.885 --> 00:01:17.990
I've also made sure to specify my content type.

00:01:17.989 --> 00:01:19.549
This is just as important with

00:01:19.549 --> 00:01:23.750
the REST Proxy consumer endpoints as it is for the producer endpoints,

00:01:23.750 --> 00:01:26.305
so don't forget to specify this.

00:01:26.305 --> 00:01:31.310
Finally, I also have provided a list of topics I wish you subscribe to.

00:01:31.310 --> 00:01:34.655
Again, even if you only wish to subscribe to one topic,

00:01:34.655 --> 00:01:39.200
specify this as a list and just pass in the one topic you want to subscribe to.

00:01:39.200 --> 00:01:41.655
You may also specify regular expressions,

00:01:41.655 --> 00:01:43.405
or more than one topic.

00:01:43.405 --> 00:01:48.484
The response you'll receive is a simply a 204 with no content.

00:01:48.484 --> 00:01:51.349
REST Proxy is just acknowledging that it has successfully received

00:01:51.349 --> 00:01:54.659
your request and the subscription is now active.

00:01:54.659 --> 00:01:56.484
Now that we've subscribed,

00:01:56.484 --> 00:01:59.299
you can actually take that base URI and append records

00:01:59.299 --> 00:02:03.034
post-fix to make a Get request to begin consuming data.

00:02:03.034 --> 00:02:07.729
Get requests for records may include an optional timeout or max bytes setting.

00:02:07.730 --> 00:02:09.770
So again, if we look at this,

00:02:09.770 --> 00:02:13.870
the base URI is specified up to the records.

00:02:13.870 --> 00:02:16.235
So you would only need to append records.

00:02:16.235 --> 00:02:20.330
Also, we're not setting content type here because this is a Get request,

00:02:20.330 --> 00:02:24.590
but we are setting the accept header on this request,

00:02:24.590 --> 00:02:26.675
and the accept header is formatted

00:02:26.675 --> 00:02:30.365
the same way as our content type headers would've been formatted.

00:02:30.365 --> 00:02:34.625
So we're telling the REST Proxy that when it sends data to us,

00:02:34.625 --> 00:02:37.400
that we only accept this format.

00:02:37.400 --> 00:02:40.159
So we're telling it that we want JSON data.

00:02:40.159 --> 00:02:43.064
The good endpoint can return binary, JSON,

00:02:43.064 --> 00:02:48.079
or Avro data, but it's based on the format that you choose in this consumer group.

00:02:48.080 --> 00:02:52.355
When getting data you must also specify the accept header as I've said,

00:02:52.354 --> 00:02:56.354
with the embedded type and the serialization format.

00:02:56.354 --> 00:02:59.419
The formatting of this accept header is identical to the content type.

00:02:59.419 --> 00:03:01.534
Once again, I just want to reiterate the fact.

00:03:01.534 --> 00:03:04.865
Failure to specify this accept header or miss specifying it

00:03:04.865 --> 00:03:07.840
will lead to your Get request failing with the 406 error,

00:03:07.840 --> 00:03:09.960
just as with your producer integrations.

00:03:09.960 --> 00:03:13.564
You need to be very careful to accurately specify this header.

00:03:13.564 --> 00:03:19.344
Successful requests return 200 with zero, or more records.

00:03:19.344 --> 00:03:22.250
So you can see records coming through the REST Proxy.

00:03:22.250 --> 00:03:24.680
So Kafka is sending data to REST Proxy which is

00:03:24.680 --> 00:03:27.515
actually using its internal client to subscribe to Kafka,

00:03:27.514 --> 00:03:30.629
and then it will send the data back to you.

00:03:30.669 --> 00:03:35.149
Successful requests will return a 200 with zero or more records.

00:03:35.150 --> 00:03:37.310
In this example, there's a single record.

00:03:37.310 --> 00:03:40.159
The exact amount of records will vary depending on timeout

00:03:40.159 --> 00:03:43.134
and data throughput in the actual Kafka topic.

00:03:43.134 --> 00:03:45.530
You must use the REST delete verb on

00:03:45.530 --> 00:03:47.330
the subscription endpoint when you're ready to

00:03:47.330 --> 00:03:49.985
unsubscribe the consumer incidence from the topic.

00:03:49.985 --> 00:03:52.790
There is much more to the consumer API to explore.

00:03:52.789 --> 00:03:54.745
You can mainly manage consumer groups,

00:03:54.745 --> 00:03:56.645
partition assignment, and offsets.

00:03:56.645 --> 00:03:58.955
We're not going to cover these topics in this course.

00:03:58.955 --> 00:04:01.969
But know these APIs are available if you'd like to make use of them.

00:04:01.969 --> 00:04:05.164
Check the REST Proxy documentation for more information.

00:04:05.164 --> 00:04:07.849
Here's an example of what the REST elite would look like.

00:04:07.849 --> 00:04:11.525
We simply send a delete with that base URI on the subscription,

00:04:11.525 --> 00:04:13.340
and we return back from REST Proxy,

00:04:13.340 --> 00:04:15.259
a 204 with no content.

00:04:15.259 --> 00:04:19.969
Again, REST Proxy is just acknowledging that it's deleted this subscription.

