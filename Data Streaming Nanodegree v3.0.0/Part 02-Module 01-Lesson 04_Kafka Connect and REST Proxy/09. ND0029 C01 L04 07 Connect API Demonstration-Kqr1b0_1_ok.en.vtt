WEBVTT
Kind: captions
Language: en

00:00:01.820 --> 00:00:04.759
Now, that we've talked about the Kafka Connect API,

00:00:04.759 --> 00:00:07.230
we're going to actually dive in and see how it works.

00:00:07.230 --> 00:00:10.964
So we're going to take a look at the management and metadata API to start.

00:00:10.964 --> 00:00:14.250
So I have the confluent documentation pulled up.

00:00:14.250 --> 00:00:15.689
I'm going to walk you through,

00:00:15.689 --> 00:00:18.600
listing connector plugins and getting some basic broker details,

00:00:18.600 --> 00:00:21.105
but I wanted to show you that this documentation exists.

00:00:21.105 --> 00:00:22.635
I also linked to this,

00:00:22.635 --> 00:00:24.600
not just in this section but also in

00:00:24.600 --> 00:00:26.790
the following sections where we're using Kafka Connect.

00:00:26.789 --> 00:00:29.460
It's best to refer to this documentation as you're working

00:00:29.460 --> 00:00:31.935
with the Kafka API because to be frank,

00:00:31.934 --> 00:00:33.875
there are a lot of options to keep in your head.

00:00:33.875 --> 00:00:35.820
So as a best practice,

00:00:35.820 --> 00:00:38.855
make sure to refer to the documentation as you're working with the API.

00:00:38.854 --> 00:00:42.454
So in this demonstration, we're going to walk through making a couple of curls.

00:00:42.454 --> 00:00:43.820
So if you're not familiar with curl,

00:00:43.820 --> 00:00:47.179
this is just a simple command line tool for making HTTP requests.

00:00:47.179 --> 00:00:50.630
So we're going to go ahead and use these commands to see how it works.

00:00:50.630 --> 00:00:56.540
So first off, Kafka Connect is running at localhost 8083 in my workspace,

00:00:56.539 --> 00:01:00.710
it will also be running at localhost 8083 in your workspace.

00:01:00.710 --> 00:01:02.329
So before we do anything,

00:01:02.329 --> 00:01:06.414
why don't we just go ahead and curl it at that URL and see what happens.

00:01:06.415 --> 00:01:09.815
As you can see, it sends us back what version it is.

00:01:09.814 --> 00:01:11.659
So this version of Kafka Connect is

00:01:11.659 --> 00:01:16.450
2.11 and it even tells us the specific git commit that it was built at.

00:01:16.450 --> 00:01:19.189
Now, this information isn't extraordinarily useful to

00:01:19.189 --> 00:01:22.584
us but it does confirm that at least Kafka Connect is up and running.

00:01:22.584 --> 00:01:25.399
Now that we've done that, let's actually go ahead and

00:01:25.400 --> 00:01:32.780
curl the Kafka Connect cluster one more time and ask it which plugins are loaded.

00:01:32.780 --> 00:01:35.390
If I run this, it's going to print out nice and messy.

00:01:35.390 --> 00:01:36.545
So let's do that.

00:01:36.545 --> 00:01:41.030
I'm going to show you why you want to use that last bit there about Python -m json.tool.

00:01:41.030 --> 00:01:42.769
So this is really hard to read.

00:01:42.769 --> 00:01:48.329
As a human being, this just looks like basically a soup of characters,

00:01:48.329 --> 00:01:51.510
and numbers, and things that are hard to comprehend.

00:01:51.510 --> 00:01:52.969
So I wanted to teach you

00:01:52.969 --> 00:01:56.034
a real quick trick when you're working with things on the command line.

00:01:56.034 --> 00:01:58.799
There's a tool called JQ which isn't in

00:01:58.799 --> 00:02:01.579
your workspace but you can use on your own machine if you'd like,

00:02:01.579 --> 00:02:06.634
but alternatively, you can actually use Python to format this output nicely.

00:02:06.635 --> 00:02:08.120
So that was a JSON string.

00:02:08.120 --> 00:02:09.715
So if we want to print that out cleanly,

00:02:09.715 --> 00:02:16.335
we can use a pipe and your Python -m json.tool,

00:02:16.335 --> 00:02:18.860
and this will feed the output of this command

00:02:18.860 --> 00:02:21.980
into this JSON format and print it out nice and clean.

00:02:21.979 --> 00:02:24.259
So now, we can actually read what was printed out.

00:02:24.259 --> 00:02:26.149
This is a little bit easier on the eyes.

00:02:26.150 --> 00:02:28.250
So what you can see here,

00:02:28.250 --> 00:02:30.979
is that we've gotten back a list of connectors that are loaded

00:02:30.979 --> 00:02:34.144
in to our Kafka Connect cluster.

00:02:34.145 --> 00:02:39.325
You have an active MQ source, elastic search, hdfs,

00:02:39.324 --> 00:02:42.929
jdbc for interacting with SQL data stores,

00:02:42.930 --> 00:02:50.099
as well as a number of other useful file sources and syncs, as well as S3.

00:02:50.169 --> 00:02:53.619
So let's exit out of single document mode.

00:02:53.620 --> 00:02:57.230
Now that we've viewed the actual connector plug-ins that are available,

00:02:57.229 --> 00:02:59.599
we're going to move on and actually create a connector.

00:02:59.599 --> 00:03:02.210
The point of this lesson, is just to get familiar with the API.

00:03:02.210 --> 00:03:05.090
So we're not going to go into the details of how we configure this connector,

00:03:05.090 --> 00:03:08.330
we're simply going to show that we can post to

00:03:08.330 --> 00:03:13.655
this connector's URL with a specific data config to create a connector.

00:03:13.655 --> 00:03:15.259
So we're going to go ahead and copy

00:03:15.259 --> 00:03:21.834
this command and we're going to go ahead and hit "Enter".

00:03:21.835 --> 00:03:26.810
You can see that we've successfully created this connector named first connector.

00:03:26.810 --> 00:03:29.449
Again, you can see the name up here, "First connector".

00:03:29.449 --> 00:03:31.354
Now, that we've created that,

00:03:31.354 --> 00:03:33.530
we can go ahead and get the status of

00:03:33.530 --> 00:03:37.789
that connector by curling our Kafka Connect cluster once more.

00:03:37.789 --> 00:03:42.155
So we're going to say, connectors/first-connector,

00:03:42.155 --> 00:03:44.164
just to see that the data's there.

00:03:44.164 --> 00:03:49.840
So I'm going to go back to single document mode and we can see that it exists.

00:03:49.840 --> 00:03:53.750
In fact, I'm going to actually do that again with the Python tool.

00:03:53.750 --> 00:03:58.530
So it's a little bit cleaner and we can see that our connector exists,

00:03:58.530 --> 00:03:59.699
then it has tasks,

00:03:59.699 --> 00:04:02.464
and that they're config is located here as well.

00:04:02.465 --> 00:04:03.875
We also have a type of source.

00:04:03.875 --> 00:04:06.655
The alternative, we could also have the type of sync.

00:04:06.655 --> 00:04:12.125
Now, that we've done that, we can also see the status of the actual running tasks,

00:04:12.125 --> 00:04:16.579
and you can see that we have a connector that it's running and then

00:04:16.579 --> 00:04:20.724
there's also a task that is working under this connector, that's also running.

00:04:20.725 --> 00:04:27.770
Now, I could pause this connector if I wanted to by pulling it against this API.

00:04:27.769 --> 00:04:33.729
So I'm going to change the method and so being a get to be a put on this connector.

00:04:33.730 --> 00:04:37.110
So then if we go back and ask for the status,

00:04:37.110 --> 00:04:42.185
we can now see that our connector is paused as is the underlying task.

00:04:42.185 --> 00:04:44.420
If I wanted to restart it,

00:04:44.420 --> 00:04:48.335
I could go back and simply tell it to restart.

00:04:48.334 --> 00:04:51.169
The only thing that we didn't do here is,

00:04:51.170 --> 00:04:52.835
unfortunately when we restart,

00:04:52.834 --> 00:04:55.294
it's a post not a put.

00:04:55.295 --> 00:05:00.590
So I'm going to go back to the front and changed the rest verbs from a put to a post.

00:05:00.589 --> 00:05:05.409
All right, now that we've done that, let's continue along.

00:05:05.899 --> 00:05:09.419
So we've listed connectors,

00:05:09.420 --> 00:05:11.400
we've detailed the connectors,

00:05:11.399 --> 00:05:14.159
we've paused, and we've restarted.

00:05:14.160 --> 00:05:17.585
Finally, let's see how we can delete connectors.

00:05:17.584 --> 00:05:25.199
So we can take this URL and we can write curl -X deletes.

00:05:25.199 --> 00:05:27.495
Now, we're using the delete rest verb.

00:05:27.495 --> 00:05:34.535
Delete localhost 8083 first connector.

00:05:34.535 --> 00:05:38.750
Now if we go back and try to list our connectors again,

00:05:38.750 --> 00:05:41.089
we'll see that there's nothing listed,

00:05:41.089 --> 00:05:43.889
and we get back an empty list.

