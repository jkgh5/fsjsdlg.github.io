WEBVTT
Kind: captions
Language: en

00:00:01.820 --> 00:00:05.339
Now, you've seen the Kafka Connect API in

00:00:05.339 --> 00:00:08.669
action and you're getting more comfortable with how the tool works conceptually.

00:00:08.669 --> 00:00:10.589
We're going to explore how to actually

00:00:10.589 --> 00:00:13.320
configure some of the most common Kafka connectors?

00:00:13.320 --> 00:00:17.085
Specifically, you'll see how to use the SQL, JDBC source,

00:00:17.085 --> 00:00:21.000
and sink connectors in addition to the file stream source connector.

00:00:21.000 --> 00:00:24.629
We can't cover every connector in this class but by the end of this section,

00:00:24.629 --> 00:00:28.469
you'll have a good idea how most connectors are configured and have the skills you

00:00:28.469 --> 00:00:33.439
need to jump into the documentation and find those connectors and learn how to use them.

00:00:33.439 --> 00:00:37.129
One of the most common uses of Kafka in many organizations is

00:00:37.130 --> 00:00:40.640
the routing of log data from many disparate microservices.

00:00:40.640 --> 00:00:45.500
In fact, this is one of the example real-world use cases we covered in Lesson 1.

00:00:45.500 --> 00:00:48.320
How do you actually get your logs into Kafka though?

00:00:48.320 --> 00:00:52.700
Do you modify your application to write logs both to disk and to Kafka?

00:00:52.700 --> 00:00:56.660
Do you write or find stand-alone applications to pipe your logs to Kafka?

00:00:56.659 --> 00:00:59.899
Well, some logging tools do support integrations of Kafka.

00:00:59.899 --> 00:01:02.750
One of the easiest and most ubiquitous ways to pipe

00:01:02.750 --> 00:01:06.034
log data into Kafka is to use Kafka Connect.

00:01:06.034 --> 00:01:08.929
To do this,, Kafka Connect can be configured to use

00:01:08.930 --> 00:01:13.055
a file stream source connector to monitor changes in a file on disk.

00:01:13.055 --> 00:01:15.590
As data in that file changes,

00:01:15.590 --> 00:01:22.105
Kafka captures those changes and emits each new line as an event in a Kafka topic.

00:01:22.105 --> 00:01:25.160
What's awesome about this approach is that your application can

00:01:25.159 --> 00:01:28.159
remain entirely unaware that it's logs are going to Kafka.

00:01:28.159 --> 00:01:30.950
This is especially powerful when you can't or don't

00:01:30.950 --> 00:01:34.159
want to modify legacy applications to work with Kafka.

00:01:34.159 --> 00:01:37.250
Your applications simply continues to write its logs to

00:01:37.250 --> 00:01:42.719
a log file or to the sys log and Kafka Connect ships the logs for you.

