WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.535
A stage is a group set of tasks.

00:00:02.535 --> 00:00:05.115
It is a physical unit of the execution plan.

00:00:05.115 --> 00:00:09.359
In other word, a stage can be divided into a smaller sets of tasks.

00:00:09.359 --> 00:00:12.959
However, these tasks totally depend on each other.

00:00:12.960 --> 00:00:18.240
We can say Spark stages are similar to the map and reduce stages in Hadoop MapReduce.

00:00:18.239 --> 00:00:20.294
Let's take a look at this piece of code.

00:00:20.295 --> 00:00:22.155
It's a simple word count example.

00:00:22.155 --> 00:00:25.140
We can easily come up with our RDD graph for this code.

00:00:25.140 --> 00:00:29.399
Here we have readFile, map,

00:00:29.399 --> 00:00:35.519
flatMap, map and the reduceByKey and also right.

00:00:35.520 --> 00:00:41.330
Parquet just represents which file you would like to save to your file system.

00:00:41.329 --> 00:00:45.469
Based on this graph there are two stages created,

00:00:45.469 --> 00:00:48.289
we already know that we have two stages because

00:00:48.289 --> 00:00:52.174
we know that it will split on reduceByKey.

00:00:52.174 --> 00:00:56.194
So stage one would be readFile, map,

00:00:56.195 --> 00:01:00.634
flatMap and other map which is a local account.

00:01:00.634 --> 00:01:03.244
So there's an x and the one count.

00:01:03.244 --> 00:01:08.250
The stage two will start from global word count which is reduce.

00:01:08.980 --> 00:01:13.055
There are two types of stages in ApacheSpark,

00:01:13.055 --> 00:01:15.665
ShuffleMapStage and a ResultStage.

00:01:15.665 --> 00:01:17.795
ShuffleMapStage Is considered to be

00:01:17.795 --> 00:01:21.784
an intermediate Spark stage in the physical execution of DAGs.

00:01:21.784 --> 00:01:24.409
It produces data for other stages.

00:01:24.409 --> 00:01:29.674
At the time of execution a Spark ShuffleMapStage saves map output files.

00:01:29.674 --> 00:01:32.944
We can fetch these files by Reduce tasks.

00:01:32.944 --> 00:01:35.659
When all map outputs are available,

00:01:35.659 --> 00:01:39.155
the ShuffleMapStage is considered ready or available.

00:01:39.155 --> 00:01:42.575
Sometimes output locations can be missing.

00:01:42.575 --> 00:01:44.775
When the output locations are missing,

00:01:44.775 --> 00:01:47.390
this implies that these partitions might not have

00:01:47.390 --> 00:01:50.674
been calculated or they might have been lost.

00:01:50.674 --> 00:01:55.024
We can easily calculate loss partitions by using internal registries like

00:01:55.025 --> 00:01:57.665
output logs or none available outputs

00:01:57.665 --> 00:02:00.680
to track how many shuffle map outputs are available.

00:02:00.680 --> 00:02:05.155
Then you can calculate if all expected outputs are available.

00:02:05.155 --> 00:02:08.555
A ResultStage is considered a final stage in a Spark job.

00:02:08.555 --> 00:02:11.780
This computes the result of an action.

00:02:11.780 --> 00:02:14.870
In this code, the stage that was created by

00:02:14.870 --> 00:02:19.745
the reduceByKey and all the way up to right would be the ResultStage,

00:02:19.745 --> 00:02:25.840
anything before reduceByKey would be the ShuffleMapSstage.

