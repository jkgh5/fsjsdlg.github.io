WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.440
To achieve high throughput and scalability on topics, Kafka supports partitioning.

00:00:04.440 --> 00:00:06.315
When Kafka topic is partitioned,

00:00:06.315 --> 00:00:11.010
the topic log is split or partitioned into multiple files.

00:00:11.009 --> 00:00:13.740
Each of these files represents a partition.

00:00:13.740 --> 00:00:16.410
If there are multiple Kafka brokers in the cluster,

00:00:16.410 --> 00:00:21.225
the partitions will typically be distributed amongst the brokers in the cluster evenly.

00:00:21.225 --> 00:00:25.050
So you can see here we have a couple of leader brokers.

00:00:25.050 --> 00:00:28.695
We have broker zero is the rear broker for partition A,

00:00:28.695 --> 00:00:31.844
which I've outlined here in orange and bolded

00:00:31.844 --> 00:00:35.519
and broker two is the leader broker for partition B.

00:00:35.520 --> 00:00:40.440
Now, you'll see broker one is not the leader for any topic.

00:00:40.439 --> 00:00:44.149
It is simply a replica of partition A and B,

00:00:44.149 --> 00:00:46.670
same thing with broker two for partition A.

00:00:46.670 --> 00:00:48.350
It is not the leader of partition A,

00:00:48.350 --> 00:00:51.785
so it is said to be a replica for partition A.

00:00:51.784 --> 00:00:56.404
Likewise, broker zero provides a replica of partition B.

00:00:56.405 --> 00:00:59.630
When Kafka producers produce messages to a topic,

00:00:59.630 --> 00:01:04.355
by default the message is hashed to identify which partition should receive the message.

00:01:04.355 --> 00:01:06.020
So here we have a producer.

00:01:06.019 --> 00:01:08.714
When it produces a message,

00:01:08.715 --> 00:01:09.960
it hashes the message.

00:01:09.959 --> 00:01:13.339
So these first two messages might get hashed to partition A.

00:01:13.340 --> 00:01:15.155
If another message is produced,

00:01:15.155 --> 00:01:17.420
it might get hashed to partition B.

00:01:17.420 --> 00:01:19.204
Using this hashing approach,

00:01:19.204 --> 00:01:23.954
messages are distributed evenly amongst these partitions. Why does this matter?

00:01:23.954 --> 00:01:26.069
Why would you want to partition a topic?

00:01:26.069 --> 00:01:30.364
Partitions are how consumers and producer code achieve parallelism with Kafka.

00:01:30.364 --> 00:01:33.559
Kafka producers can asynchronously produce messages to

00:01:33.560 --> 00:01:37.150
many partitions at once from within the same application.

00:01:37.150 --> 00:01:40.730
Additionally, if the cluster contains more than one broker,

00:01:40.730 --> 00:01:43.400
more than one broker can receive the data as well

00:01:43.400 --> 00:01:46.700
further increasing the speed at which data is ingested.

00:01:46.700 --> 00:01:49.370
Similarly, consumers of the topic data

00:01:49.370 --> 00:01:52.010
can utilize a parallel approach for each partition.

00:01:52.010 --> 00:01:57.090
This increases the speed at which consumers can pull data off the topics themselves.

