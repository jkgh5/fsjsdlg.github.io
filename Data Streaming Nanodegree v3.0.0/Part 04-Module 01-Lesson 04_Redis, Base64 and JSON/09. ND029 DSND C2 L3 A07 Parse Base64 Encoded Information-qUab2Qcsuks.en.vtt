WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.485
Let's talk about Parse Base-64 Encoded Information.

00:00:04.485 --> 00:00:08.040
We just worked on manually saving and reading from Redis.

00:00:08.040 --> 00:00:12.405
Next, we will talk about parse base-64 encoded information.

00:00:12.405 --> 00:00:16.020
We will start with discussing what base-64 is.

00:00:16.020 --> 00:00:20.370
Then we will explore base-64 inside JSON.

00:00:20.370 --> 00:00:25.065
Let's start by discussing what base-64 is.

00:00:25.065 --> 00:00:29.925
Base 64 is a system of representing binary data,

00:00:29.925 --> 00:00:32.415
8-bit data in text format.

00:00:32.415 --> 00:00:34.800
Each binary sequence has a letter.

00:00:34.800 --> 00:00:37.735
It can be used to represent any binary data,

00:00:37.735 --> 00:00:40.160
including text and photographs.

00:00:40.160 --> 00:00:44.945
Here is a table that shows the key for each letter and what it represents.

00:00:44.945 --> 00:00:48.020
The padding character is an equals sign.

00:00:48.020 --> 00:00:52.520
Let's start looking at base-64 inside JSON.

00:00:52.520 --> 00:00:57.365
Sometimes document formatted messages contain encoded information.

00:00:57.365 --> 00:01:03.064
It can be convenient to embed small images as text directly in an HTML document.

00:01:03.064 --> 00:01:07.175
In this example, a smiley face is embedded in HTML snippet.

00:01:07.175 --> 00:01:10.385
The base-64 is truncated for brevity.

00:01:10.385 --> 00:01:14.674
Here is the smiley face as it is displayed in a browser.

00:01:14.674 --> 00:01:20.180
This is what the entire base-64 string looks like in the HTML source.

00:01:20.180 --> 00:01:21.979
In our business application,

00:01:21.979 --> 00:01:26.915
the Redis source connector uses base-64 to communicate saved information.

00:01:26.915 --> 00:01:28.715
Here is a message sample.

00:01:28.715 --> 00:01:32.340
Can you decode the encoded information?

00:01:32.380 --> 00:01:37.265
Here is the message decoded from base-64 to plain text.

00:01:37.265 --> 00:01:40.505
The decoded key is pumpkin pie ingredients.

00:01:40.505 --> 00:01:43.480
The decoded element is pumpkin.

00:01:43.480 --> 00:01:49.055
Spark has a built-in Spark SQL function called on base-64,

00:01:49.055 --> 00:01:52.310
which accepts a base-64 encoded value.

00:01:52.310 --> 00:01:55.580
In this example, the encoded streaming DF,

00:01:55.580 --> 00:01:58.685
DataFrame has a field called reservation.

00:01:58.685 --> 00:02:02.060
We are decoding it and then casting it to a string.

00:02:02.060 --> 00:02:07.500
This statement must be used in a Spark SQL or DataFrame select.

